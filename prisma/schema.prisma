// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(uuid())
  createdAt              DateTime     @default(now()) @map("created_at")
  metamaskWalletAddress  String       @unique @map("metamask_wallet_address")
  followedGetmintTwitter Boolean      @default(false) @map("followed_getmint_twitter")
  twitterEnabled         Boolean      @default(false) @map("twitter_enabled")
  twitterLogin           String?      @map("twitter_login")
  avatar                 String?
  nfts                   Nft[]
  balanceLogs            BalanceLog[]

  @@map(name: "users")
}

model Nft {
  id                 String               @id @default(uuid())
  pinataImageHash    String               @unique @map("pinata_image_hash")
  pinataJsonHash     String               @unique @map("pinata_json_hash")
  name               String
  description        String?              @default("")
  createdAt          DateTime             @default(now()) @map("created_at")
  tokenId            Int
  userId             String               @map("user_id")
  user               User                 @relation(fields: [userId], references: [id])
  mintLog            MintLog?
  nftChainConnection NftChainConnection[]

  @@map(name: "nfts")
}

model BalanceLog {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now()) @map("created_at")
  userId      String           @map("user_id")
  user        User             @relation(fields: [userId], references: [id])
  amount      Int
  operation   BalanceOperation
  type        BalanceLogType
  description String?
  mintLog     MintLog?

  @@map(name: "balance_logs")
}

model MintLog {
  id              String     @id @default(uuid())
  nft             Nft        @relation(fields: [nftId], references: [id])
  nftId           String     @unique @map("nft_id")
  balanceLog      BalanceLog @relation(fields: [balanceLogId], references: [id])
  balanceLogId    String     @unique @map("balance_log_id")
  transactionHash String     @unique @map("transaction_hash")

  @@map(name: "mint_logs")
}

model NftChainConnection {
  id      String @id @default(uuid())
  chain   Chain  @relation(fields: chainId, references: [id])
  chainId String @map("chain_id")
  nft     Nft    @relation(fields: nftId, references: [id])
  nftId   String

  @@map(name: "nft_chain_connection")
}

model Chain {
  id                 String               @id @default(uuid())
  name               String
  network            String
  chainId            Int                  @unique @map("chain_id")
  lzChain            Int                  @map("lz_chain")
  nftChainConnection NftChainConnection[]

  @@map(name: "chains")
}

enum BalanceOperation {
  credit
  debit
}

enum BalanceLogType {
  refferal
  twitter_activity_daily
  twitter_getmint_subscription
  mint
  bridge
}
